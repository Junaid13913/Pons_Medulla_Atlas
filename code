### Load Required Libraries
library(devtools)
library(reticulate)
library(Seurat)
library(Matrix)
library(dplyr)
library(ggplot2)
library(tidyr)
library(tidyverse)
library(readxl)
library(ComplexHeatmap)
library(RColorBrewer)

### Setting the working directory to load data
setwd("/mnt/S7/data2/AIMED/sblim/Muhammad/pons_medulla/(ventrolateral_medulla)Schwalbe et al")
rvlm <- readRDS("rvlmAllCells_no_unknowns_30PCs_03_06_2023.rds")

### Addi1ng Metadata
rvlm <- AddMetaData(rvlm, rep("Schwalbe et al.", 114805), col.name = "Study")
rvlm <- AddMetaData(rvlm, rep("8-20 weeks", 114805), col.name = "Age")
rvlm <- AddMetaData(rvlm, rep("Ventrolateral medulla", 114805), col.name = "Region")
rvlm <- AddMetaData(rvlm, rep("Next-Seq", 114805), col.name = "Technology")
rvlm <- AddMetaData(rvlm, rep("C57BL/6J", 114805), col.name = "Strain")
rvlm <- AddMetaData(rvlm, rep("Both", 114805), col.name = "Sex")

### Plot and Save Data
DimPlot(rvlm, reduction = "umap", group.by = "Sex", raster=FALSE)
saveRDS(rvlm, file = "Schwalbe_et_al_2024_Mouse_VLM_Seurat.rds")

### Load Additional Datasets
setwd("/mnt/S7/data2/AIMED/sblim/Muhammad/pons_medulla/GSE168737")
untar("GSE168737_RAW.tar", exdir = "GSE168737_RAW")

# Load Data
seurat_objs <- list(
  adlib1 = CreateSeuratObject(Read10X_h5("GSE168737_RAW/GSM5163373_nts-adlib1.h5"), project = "nts_adlib1"),
  adlib2 = CreateSeuratObject(Read10X_h5("GSE168737_RAW/GSM5163374_nts-adlib2.h5"), project = "nts_adlib2"),
  fast1 = CreateSeuratObject(Read10X_h5("GSE168737_RAW/GSM5163375_nts-fast1.h5"), project = "nts_fast1"),
  fast2 = CreateSeuratObject(Read10X_h5("GSE168737_RAW/GSM5163376_nts-fast2.h5"), project = "nts_fast2")
)

# Merge Datasets
seurat_GSE168737 <- Reduce(function(x, y) merge(x, y), seurat_objs)

# Add Metadata
seurat_GSE168737 <- AddMetaData(seurat_GSE168737, rep("GSE168737", 16912), col.name = "Study")
seurat_GSE168737 <- AddMetaData(seurat_GSE168737, rep("6-8 weeks", 16912), col.name = "Age")
seurat_GSE168737 <- AddMetaData(seurat_GSE168737, rep("NTS", 16912), col.name = "Region")
seurat_GSE168737 <- AddMetaData(seurat_GSE168737, rep("NovaSeq", 16912), col.name = "Technology")
seurat_GSE168737 <- AddMetaData(seurat_GSE168737, rep("C57BL/6J", 16912), col.name = "Strain")
seurat_GSE168737 <- AddMetaData(seurat_GSE168737, rep("Male", 16912), col.name = "Sex")

# Save Processed Data
saveRDS(seurat_GSE168737, file = "GSE168737.rds")

############################
############################
################################
setwd("/mnt/S7/data2/AIMED/sblim/Muhammad/pons_medulla/GSE247602/medulla")

untar("GSM7893476_Medulla_GFP_filtered_feature_bc_matrix.tar.gz", exdir = "./Medulla_GFP_A")
untar("GSM7893490_Medulla_GFP_B_filtered_feature_bc_matrix.tar.gz", exdir = "./Medulla_GFP_B")
untar("GSM7893494_Medulla_GFP_C_filtered_feature_bc_matrix.tar.gz", exdir = "./Medulla_GFP_C")

untar("GSM7893477_Medullar_RFP_A_filtered_feature_bc_matrix.tar.gz", exdir = "./Medulla_RFP_A")
untar("GSM7893491_Medulla_RFP_B_filtered_feature_bc_matrix.tar.gz", exdir = "./Medulla_RFP_B")
untar("GSM7893495_Medulla_RFP_C_filtered_feature_bc_matrix.tar.gz", exdir = "./Medulla_RFP_C")


GFP_A <- Read10X(data.dir = "./Medulla_GFP_A")
GFP_B <- Read10X(data.dir = "./Medulla_GFP_B")
GFP_C <- Read10X(data.dir = "./Medulla_GFP_C")

RFP_A <- Read10X(data.dir = "./Medulla_RFP_A")
RFP_B <- Read10X(data.dir = "./Medulla_RFP_B")
RFP_C <- Read10X(data.dir = "./Medulla_RFP_C")


seurat_GFP_A <- CreateSeuratObject(counts = GFP_A, project = "Medulla_GFP_A")
seurat_GFP_B <- CreateSeuratObject(counts = GFP_B, project = "Medulla_GFP_B")
seurat_GFP_C <- CreateSeuratObject(counts = GFP_C, project = "Medulla_GFP_C")

seurat_RFP_A <- CreateSeuratObject(counts = RFP_A, project = "Medulla_RFP_A")
seurat_RFP_B <- CreateSeuratObject(counts = RFP_B, project = "Medulla_RFP_B")
seurat_RFP_C <- CreateSeuratObject(counts = RFP_C, project = "Medulla_RFP_C")

seurat_GFP <- merge(seurat_GFP_A, y = c(seurat_GFP_B, seurat_GFP_C), add.cell.ids = c("GFP_A", "GFP_B", "GFP_C"))
seurat_RFP <- merge(seurat_RFP_A, y = c(seurat_RFP_B, seurat_RFP_C), add.cell.ids = c("RFP_A", "RFP_B", "RFP_C"))

GSE247602_medulla <- merge(seurat_GFP, y = seurat_RFP, add.cell.ids = c("GFP", "RFP"))

GSE247602_medulla[["percent.mt"]] <- PercentageFeatureSet(GSE247602_medulla, pattern = "^mt-")

head(GSE247602_medulla@meta.data)

GSE247602_medulla <- AddMetaData(GSE247602_medulla, rep(c("GSE247602_medulla"), 16740), col.name = "Study")
GSE247602_medulla <- AddMetaData(GSE247602_medulla, rep(c("P42-56"), 16740), col.name = "Age")
GSE247602_medulla <- AddMetaData(GSE247602_medulla, rep(c("Medulla"), 16740), col.name = "Region")
GSE247602_medulla <- AddMetaData(GSE247602_medulla, rep(c("NovaSeq"), 16740), col.name = "Technology")
GSE247602_medulla <- AddMetaData(GSE247602_medulla, rep(c("C57BL/6J"), 16740), col.name = "Strain")
GSE247602_medulla <- AddMetaData(GSE247602_medulla, rep(c("Both"), 16740), col.name = "Sex")


saveRDS(GSE247602_medulla, file = "GSE247602_medulla.rds")


#########################
setwd("/mnt/S7/data2/AIMED/sblim/Muhammad/pons_medulla/GSE247602/pons")

untar("GSM7893474_Pons_GFP_filtered_feature_bc_matrix.tar.gz", exdir = "./Pons_GFP_A")
untar("GSM7893488_Pons_GFP_2_raw_feature_bc_matrix.tar.gz", exdir = "./Pons_GFP_B")
untar("GSM7893492_Pons_GFP_C_filtered_feature_bc_matrix.tar.gz", exdir = "./Pons_GFP_C")

untar("GSM7893475_Pons_RFP_filtered_feature_bc_matrix.tar.gz", exdir = "./Pons_RFP_A")
untar("GSM7893489_Pons_RFP_B_filtered_feature_bc_matrix.tar.gz", exdir = "./Pons_RFP_B")
untar("GSM7893493_Pons_RFP_C_filtered_feature_bc_matrix.tar.gz", exdir = "./Pons_RFP_C")

GFP_A_pons <- Read10X(data.dir = "./Pons_GFP_A")
GFP_B_pons <- Read10X(data.dir = "./Pons_GFP_B")
GFP_C_pons <- Read10X(data.dir = "./Pons_GFP_C")

RFP_A_pons <- Read10X(data.dir = "./Pons_RFP_A")
RFP_B_pons <- Read10X(data.dir = "./Pons_RFP_B")
RFP_C_pons <- Read10X(data.dir = "./Pons_RFP_C")

seurat_GFP_A_pons <- CreateSeuratObject(counts = GFP_A_pons, project = "Pons_GFP_A")
seurat_GFP_B_pons <- CreateSeuratObject(counts = GFP_B_pons, project = "Pons_GFP_B")
seurat_GFP_C_pons <- CreateSeuratObject(counts = GFP_C_pons, project = "Pons_GFP_C")

seurat_RFP_A_pons <- CreateSeuratObject(counts = RFP_A_pons, project = "Pons_RFP_A")
seurat_RFP_B_pons <- CreateSeuratObject(counts = RFP_B_pons, project = "Pons_RFP_B")
seurat_RFP_C_pons <- CreateSeuratObject(counts = RFP_C_pons, project = "Pons_RFP_C")

seurat_GFP_pons <- merge(seurat_GFP_A_pons, y = seurat_GFP_C_pons, add.cell.ids = c("GFP_A", "GFP_C"))
seurat_RFP_pons <- merge(seurat_RFP_A_pons, y = c(seurat_RFP_B_pons, seurat_RFP_C_pons), add.cell.ids = c("RFP_A", "RFP_B", "RFP_C"))

GSE247602_pons <- merge(seurat_GFP_pons, y = seurat_RFP_pons, add.cell.ids = c("GFP", "RFP"))
GSE247602_pons[["percent.mt"]] <- PercentageFeatureSet(GSE247602_pons, pattern = "^mt-")

head(GSE247602_pons@meta.data)


GSE247602_pons <- AddMetaData(GSE247602_pons, rep(c("GSE247602_pons"), 7517), col.name = "Study")
GSE247602_pons <- AddMetaData(GSE247602_pons, rep(c("P42-56"), 7517), col.name = "Age")
GSE247602_pons <- AddMetaData(GSE247602_pons, rep(c("Pons"), 7517), col.name = "Region")
GSE247602_pons <- AddMetaData(GSE247602_pons, rep(c("NovaSeq"), 7517), col.name = "Technology")
GSE247602_pons <- AddMetaData(GSE247602_pons, rep(c("C57BL/6J"), 7517), col.name = "Strain")
GSE247602_pons <- AddMetaData(GSE247602_pons, rep(c("Both"), 7517), col.name = "Sex")


saveRDS(GSE247602_pons, file = "GSE247602_pons.rds")

### Load and Process Additional Datasets Similarly
# ...
# Merge datasets
pons_medulla <- merge(
  Schwalbe_et_al_2024_Mouse_VLM_Seurat, 
  y = list(GSE168737, GSE200003_WT, GSE211538, GSE226809_seurat, GSE236349, 
           GSE247602_medulla, GSE247602_pons, GSE178693),
  add.cell.ids = c("Schwalbe_Mouse_VLM", "GSE168737", "GSE200003_WT", "GSE211538", 
                   "GSE226809", "GSE236349", "GSE247602_medulla", "GSE247602_pons", "GSE178693"),
  project = "Pons_Medulla"
)

# Cell counts per dataset
cell_counts <- table(pons_medulla$Study)
cell_counts_df <- as.data.frame(cell_counts)
colnames(cell_counts_df) <- c("Dataset", "CellCount")

# Bar plot of cell counts
ggplot(cell_counts_df, aes(x = Dataset, y = CellCount, fill = Dataset)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = comma(CellCount)), vjust = -0.5, color = "black") +
  theme_minimal() +
  labs(title = "Number of Cells per Dataset after QC", x = "Dataset", y = "Cell Count") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(labels = comma)

# Quality control
pons_medulla[["percent.mt"]] <- PercentageFeatureSet(pons_medulla, pattern = "^mt-")
VlnPlot(pons_medulla, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), pt.size = 0, raster=FALSE) + NoLegend()
pons_medulla <- subset(pons_medulla, subset = nFeature_RNA > 200 & nFeature_RNA < 3000 & percent.mt < 5)

# Feature scatter plots
FeatureScatter(pons_medulla, feature1 = "nCount_RNA", feature2 = "percent.mt", raster = FALSE) +
  FeatureScatter(pons_medulla, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", raster = FALSE)

# Pre-integration workflow
pons_medulla <- NormalizeData(pons_medulla)
pons_medulla <- FindVariableFeatures(pons_medulla)
pons_medulla <- ScaleData(pons_medulla)
pons_medulla <- RunPCA(pons_medulla)

# PCA visualization
DimPlot(pons_medulla, reduction = "pca", group.by = "Study") + ggtitle("PCA Before Integration")
ElbowPlot(pons_medulla)

# Clustering and UMAP
pons_medulla <- FindNeighbors(pons_medulla, dims = 1:20)
pons_medulla <- FindClusters(pons_medulla)
pons_medulla <- RunUMAP(pons_medulla, dims = 1:20)

# Custom color palette
custom_colors <- c("#1f78b4", "#33a02c", "#e31a1c", "#ff7f00", "#6a3d9a", "#b15928", "#a6cee3", "#b2df8a", "#fb9a99")

# UMAP visualization before integration
DimPlot(pons_medulla, reduction = "umap", group.by = "Study", label = FALSE) +
  scale_color_manual(values = custom_colors) +
  theme_minimal(base_size = 14) +
  theme(plot.title = element_text(hjust = 0.5, face = "bold")) +
  ggtitle("UMAP Before Integration")

# Split datasets for integration
pons_medulla.list <- SplitObject(pons_medulla, split.by = "Study")
pons_medulla.list <- lapply(pons_medulla.list, function(x) {
  x <- NormalizeData(x)
  x <- FindVariableFeatures(x, selection.method = "vst")
  x <- ScaleData(x)
  x <- RunPCA(x)
  return(x)
})

# Integration
features <- SelectIntegrationFeatures(object.list = pons_medulla.list)
anchors <- FindIntegrationAnchors(object.list = pons_medulla.list)
pons_medulla <- IntegrateData(anchorset = anchors)
pons_medulla <- ScaleData(pons_medulla)
pons_medulla <- RunPCA(pons_medulla)
pons_medulla <- RunUMAP(pons_medulla, dims = 1:20)
pons_medulla <- FindNeighbors(pons_medulla, dims = 1:20)

# Final UMAP visualization
DimPlot(pons_medulla, reduction = 'umap', group.by = 'Study', raster = FALSE, label = FALSE) + theme_bw() + theme(legend.text = element_text(size = 14))
DimPlot(pons_medulla, reduction = 'umap', group.by = 'Sex', raster = FALSE, label = FALSE) + theme_bw() + theme(legend.text = element_text(size = 14))
DimPlot(pons_medulla, reduction = 'umap', group.by = 'Age', raster = FALSE, label = FALSE) + theme_bw() + theme(legend.text = element_text(size = 10))
DimPlot(pons_medulla, reduction = 'umap', group.by = 'Strain', raster = FALSE, label = FALSE) + theme_bw() + theme(legend.text = element_text(size = 14))
DimPlot(pons_medulla, reduction = 'umap', group.by = 'Region', raster = FALSE, label = FALSE) + theme_bw() + theme(legend.text = element_text(size = 9))

#cluster specific markers 
features <- c("Pdzd2", "Ccdc60", #Metabolic Glio-Pericyte
              "Dcn", "Ranbp3l",          # Vascular leptomeningeal cells 
              "Calb1", "Car8", "Pcp2",  # Purkinje cells
              "Slco1c1", "Pecam1",       # Endothelial
              "Agt", "Aqp4",         # Astrocytes
              "Fyn", "Olig1", # Newly formed oligodendrocytes
              "Mag", "Mog", "Olig1",     # Oligodendrocytes
              "Klk6", "Anxa5",           # Mature Oligodendrocytes
              "Cx3cr1", "P2ry12",        # Microglia
              "Cspg4", "Pdgfra",         # Polydendrocytes
              "Th", "Ddc", "Slc6a2",     # Noradrenergic Neurons
              "Snap25", "Map2", "Syt1")  # Neurons

pons_medulla$cell_type <- as.character(Idents(pons_medulla))

pons_medulla$cell_type[pons_medulla$seurat_clusters == 0] <- "Oligodendrocytes"
pons_medulla$cell_type[pons_medulla$seurat_clusters == 1] <- "Neurons"
pons_medulla$cell_type[pons_medulla$seurat_clusters == 2] <- "Neurons"
pons_medulla$cell_type[pons_medulla$seurat_clusters == 3] <- "Astro1"
pons_medulla$cell_type[pons_medulla$seurat_clusters == 4] <- "Neurons"
pons_medulla$cell_type[pons_medulla$seurat_clusters == 5] <- "Neurons"
pons_medulla$cell_type[pons_medulla$seurat_clusters == 6] <- "Polydendrocytes"
pons_medulla$cell_type[pons_medulla$seurat_clusters == 7] <- "Mature oligodendrocytes"
pons_medulla$cell_type[pons_medulla$seurat_clusters == 8] <- "Neurons"
pons_medulla$cell_type[pons_medulla$seurat_clusters == 9] <- "Microglia"
pons_medulla$cell_type[pons_medulla$seurat_clusters == 10] <- "Endothelial"
pons_medulla$cell_type[pons_medulla$seurat_clusters == 11] <- "Neurons"
pons_medulla$cell_type[pons_medulla$seurat_clusters == 12] <- "Noradrenergic_neurons"
pons_medulla$cell_type[pons_medulla$seurat_clusters == 13] <- "Vascular Leptomeningeal cells"
pons_medulla$cell_type[pons_medulla$seurat_clusters == 14] <- "Astro2"
pons_medulla$cell_type[pons_medulla$seurat_clusters == 15] <- "Newly formed oligodendrocytes"
pons_medulla$cell_type[pons_medulla$seurat_clusters == 16] <- "Metabolic Glio-Pericyte"
pons_medulla$cell_type[pons_medulla$seurat_clusters == 17] <- "Purkinje neurons_1"

Idents(pons_medulla) <- pons_medulla$cell_type

darker_pastel_colors <- c("#D67878", "#6F93AF", "#7FAE7C", "#AA79B6", "#D59A56", 
                          "#E7E43C", "#B8A58C", "#D88EBE", "#A8DADC", "#6299AD", 
                          "#E59156", "#FF9966", "#96C2A3", "#E5B90F", "#B7895D")

DimPlot(pons_medulla, reduction = 'umap', raster = FALSE, shuffle = TRUE) + 
  scale_color_manual(values = cell_type_colors)  + 
  theme(legend.text = element_text(size = 14)) +
  labs(title = "UMAP of Pons and Medulla Cell Types")

#####cell type proportion
library(ggrepel)

cell_type_proportions <- as.data.frame(table(Idents(pons_medulla)))
colnames(cell_type_proportions) <- c("CellType", "Count")

cell_type_proportions$Percentage <- (cell_type_proportions$Count / sum(cell_type_proportions$Count)) * 100
darker_pastel_colors <- c("#1b9e77", "#d95f02", "#7570b3", "#e7298a", "#66a61e",
                          "#e6ab02", "#a6761d", "lightblue", "#1f78b4", "#33a02c",
                          "#fb9a99", "#e31a1c", "#fdbf6f", "#ff7f00", "#cab2d6")

ggplot(cell_type_proportions, aes(x = 2, y = Percentage, fill = CellType)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y", start = 0) +
  xlim(0.5, 2.5) +  # Adjust the hole size for donut effect
  scale_fill_manual(values = darker_pastel_colors) +
  theme_void() +
  geom_label_repel(aes(label = paste0(round(Percentage, 1), "%")),
                   position = position_stack(vjust = 0.5),
                   box.padding = 0.5, point.padding = 0.5, segment.size = 0.5, # Adjust label repelling
                   size = 5.5, show.legend = FALSE) +  # Size of the labels
  theme(
    legend.text = element_text(size = 12),
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    legend.title = element_blank()
  ) +
  ggtitle("Proportion of Cell Types (Donut Chart)")


################# subsetting neurons 
# Set default assay
DefaultAssay(pons_medulla) <- "integrated"

# Subset neurons
PM_Neurons <- subset(pons_medulla, idents = c("Neurons"))
DimPlot(PM_Neurons, reduction = "umap", label = TRUE, label.size = 4.5, pt.size = 0.6) + NoLegend()

# Scaling and PCA
all.genes <- rownames(PM_Neurons)
PM_Neurons <- ScaleData(PM_Neurons, features = all.genes)
PM_Neurons <- FindVariableFeatures(PM_Neurons)
PM_Neurons <- RunPCA(PM_Neurons, features = VariableFeatures(object = PM_Neurons))
ElbowPlot(PM_Neurons)

# UMAP and Clustering
PM_Neurons <- RunUMAP(PM_Neurons, dims = 1:20)
PM_Neurons <- FindNeighbors(PM_Neurons, reduction = "pca", dims = 1:20)
PM_Neurons <- FindClusters(PM_Neurons, resolution = 0.2)
Idents(PM_Neurons) <- "integrated_snn_res.0.2"

# Marker detection
DefaultAssay(PM_Neurons) <- "RNA"
PM_Neurons_markers <- FindAllMarkers(PM_Neurons, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
write.csv(PM_Neurons_markers, file = "PM_Neurons_markers.csv", row.names = FALSE)

# Identify top markers
top_markers <- PM_Neurons_markers %>%
  filter(p_val_adj < 0.01 & avg_log2FC > 0.25) %>%
  group_by(cluster) %>%
  top_n(n = 3, wt = avg_log2FC)

top_genes <- unique(top_markers$gene)

# DotPlot Visualization
dot_plot <- DotPlot(PM_Neurons, features = top_genes) +
  scale_color_gradientn(colors = c("lightblue", "yellow", "red")) +
  scale_size(range = c(1, 6)) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
    axis.text.y = element_text(size = 10),
    plot.title = element_text(size = 14, face = "bold"),
    panel.grid.major = element_blank(),
    panel.background = element_blank()
  ) +
  labs(title = "Top 3 Markers per Cluster", x = "Genes", y = "Cluster Identities") +
  coord_flip()

PM_Neurons$cell_type <- as.character(Idents(PM_Neurons))

PM_Neurons$cell_type[PM_Neurons$seurat_clusters == 0] <- "Collagen-enriched neurons"
PM_Neurons$cell_type[PM_Neurons$seurat_clusters == 1] <- "Collagen-enriched neurons"
PM_Neurons$cell_type[PM_Neurons$seurat_clusters == 2] <- "Cerebellar granule neurons"
PM_Neurons$cell_type[PM_Neurons$seurat_clusters == 3] <- "Myelinating glia"
PM_Neurons$cell_type[PM_Neurons$seurat_clusters == 4] <- "Myelinating glia"
PM_Neurons$cell_type[PM_Neurons$seurat_clusters == 5] <- "Purkinje neurons_2"
PM_Neurons$cell_type[PM_Neurons$seurat_clusters == 6] <- "Peptidergic neurons"
PM_Neurons$cell_type[PM_Neurons$seurat_clusters == 7] <- "Vglut1+ excitatory neurons"
PM_Neurons$cell_type[PM_Neurons$seurat_clusters == 8] <- "Vglut1+ excitatory neurons"
PM_Neurons$cell_type[PM_Neurons$seurat_clusters == 9] <- "Inhibitory neurons"
PM_Neurons$cell_type[PM_Neurons$seurat_clusters == 10] <- "Vglut2+ excitatory neurons"
PM_Neurons$cell_type[PM_Neurons$seurat_clusters == 11] <- "Inhibitory neurons"
PM_Neurons$cell_type[PM_Neurons$seurat_clusters == 12] <- "Astro3"
PM_Neurons$cell_type[PM_Neurons$seurat_clusters == 13] <- "Erythrocytes"
PM_Neurons$cell_type[PM_Neurons$seurat_clusters == 14] <- "Cholinergic neurons"
PM_Neurons$cell_type[PM_Neurons$seurat_clusters == 15] <- "Cholinergic neurons"
PM_Neurons$cell_type[PM_Neurons$seurat_clusters == 16] <- "Inhibitory neurons"
PM_Neurons$cell_type[PM_Neurons$seurat_clusters == 17] <- "Inhibitory neurons"
PM_Neurons$cell_type[PM_Neurons$seurat_clusters == 18] <- "Vglut1+ excitatory neurons"

Idents(PM_Neurons) <- PM_Neurons$cell_type

###### DEGs of annotated neuronal cells

saveRDS(PM_Neurons, file= "Pons_medulla_Neurons_leve1.rds")


#################################### removing non_neuronal contamination
# Audit before
cat("Before filtering:\n"); print(table(Idents(PM_Neurons)))

# removing non_neuronal contamination
to_drop <- c("Erythrocytes", "Myelinating glia", "Astro3")
PM_Neurons_clean <- subset(PM_Neurons, idents = setdiff(levels(PM_Neurons), to_drop))

# Droping now-unused levels, keep same cluster labels/UMAP coordinates
Idents(PM_Neurons_clean) <- droplevels(Idents(PM_Neurons_clean))

# Quick audit after
cat("\nAfter filtering:\n"); print(table(Idents(PM_Neurons_clean)))
cat(sprintf("\nRemoved %d cells (%.2f%%)\n",
            ncol(PM_Neurons) - ncol(PM_Neurons_clean),
            100 * (ncol(PM_Neurons) - ncol(PM_Neurons_clean)) / ncol(PM_Neurons)))

markers <- c( "Grid2", "Itpr1",  "Pcp4", "Adcyap1", "Calca", "Tac1",
              "Gad1", "Gad2", "Slc32a1", "Stac", "Foxp2" ,"Slc17a6", "Slc17a7", "Tanc1"," Col25a1", "Col11a1", "Col4a2", 
              "Chat", "Slc5a7", "Isl1", "Grm4", "Grin2c", "Neurod1", "Car4", 'Reln')

DotPlot(PM_Neurons_clean, features = markers, group.by = "cell_type") +
  RotatedAxis() +
  theme_bw(base_size = 16) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
    axis.text.y = element_text(size = 12),
    plot.title = element_text(face = "bold", size = 16, hjust = 0.5)
  ) +
  ggtitle("") +
  scale_color_gradientn(colors = c("white", "lightgrey", "darkred")) +  
  scale_size(range = c(1, 8))  

# Plot using the SAME UMAP already stored in the object
p_umap <- DimPlot(PM_Neurons_clean, reduction = "umap",
                  group.by = "cell_type", label = FALSE) +
  ggtitle("Neuron subset (contaminants removed; original UMAP)")
print(p_umap)

custom_colors <- c("#1f78b4", "#33a02c", "#e31a1c", "#ff7f00", "#6a3d9a", "#b15928", 
                   "#a6cee3", "#b2df8a", "#fb9a99", "#fdbf6f", "#cab2d6", "#ffff99", 
                   "#ff00ff", "#00ffff", "#0000ff", "#ff1493", "#7fffd4", "#ffa07a")

DimPlot(PM_Neurons_clean, reduction = 'umap', raster = FALSE, shuffle = TRUE, label = FALSE) + 
  scale_color_manual(values = custom_colors) +  
  theme_bw() + 
  theme(legend.text = element_text(size = 14),  
        axis.title = element_text(size = 16, face = "bold"),  
        axis.text = element_text(size = 12),  
        plot.title = element_text(size = 18, face = "bold", hjust = 0.5), 
        panel.border = element_rect(color = "black", size = 1),  
        panel.grid = element_blank()) 

DefaultAssay(PM_Neurons_clean) <- "RNA"
slot_to_use <- "data"

markers_all <- FindAllMarkers(
  PM_Neurons_clean,
  only.pos       = TRUE,
  test.use       = "wilcox",
  min.pct        = 0.10,
  logfc.threshold = 0.25,
  return.thresh  = 0.05,
  assay          = "RNA",
  slot           = slot_to_use
)

if ("avg_logFC" %in% colnames(markers_all) && !("avg_log2FC" %in% colnames(markers_all))) {
  markers_all <- markers_all %>% rename(avg_log2FC = avg_logFC)  # unify name
}

markers_all <- markers_all %>% arrange(cluster, desc(avg_log2FC), p_val_adj)
write.csv(markers_all, "DEG_Level1_Neurons.csv", row.names = FALSE)

saveRDS(PM_Neurons_clean, file= "Pons_medulla_Neurons_leve2.rds")

#######################sub-setting of excitatory_neurons and inhibitory_neurons
excitatory_neurons <- subset(
  PM_Neurons,
  subset = cell_type %in% c("Vglut1+ excitatory neurons", "Vglut2+ excitatory neurons")
)
inhibitory_neurons <- subset(PM_Neurons, subset = cell_type == "Inhibitory neurons")

combined_neurons <- merge(excitatory_neurons, inhibitory_neurons)

combined_neurons <- FindVariableFeatures(combined_neurons)
combined_neurons <- ScaleData(combined_neurons)
combined_neurons <- RunPCA(combined_neurons)
combined_neurons <- FindNeighbors(combined_neurons, dims = 1:20)
combined_neurons <- FindClusters(combined_neurons, resolution = 0.1)  
combined_neurons <- RunUMAP(combined_neurons, dims = 1:20)

DimPlot(combined_neurons, reduction = "umap")
markers <- FindAllMarkers(combined_neurons, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)

markers %>%
  group_by(cluster) %>%
  dplyr::filter(avg_log2FC > 1) %>%
  slice_head(n = 10) %>%
  ungroup() -> top10
DoHeatmap(combined_neurons, features = top10$gene) + NoLegend()

combined_neurons[["percent.mt"]] <- PercentageFeatureSet(combined_neurons, pattern = "^mt-")
VlnPlot(combined_neurons, features = "percent.mt", group.by = "seurat_clusters", pt.size = 0)

combined_neurons_clean <- subset(combined_neurons, idents = c(5, 6, 8, 16), invert = TRUE)
DimPlot(combined_neurons_clean, reduction = "umap", group.by = "seurat_clusters")

combined_neurons_clean <- ScaleData(combined_neurons_clean)
combined_neurons_clean <- RunPCA(combined_neurons_clean)

combined_neurons_clean <- FindNeighbors(combined_neurons_clean, dims = 1:20)
combined_neurons_clean <- FindClusters(combined_neurons_clean, resolution = 0.2)  # Adjust resolution as needed
combined_neurons_clean <- RunUMAP(combined_neurons_clean, dims = 1:20)
DimPlot(combined_neurons_clean, reduction = "umap", group.by = "seurat_clusters")

markers_clean <- FindAllMarkers(combined_neurons_clean, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
markers_clean %>%
  group_by(cluster) %>%
  dplyr::filter(avg_log2FC > 1) %>%
  slice_head(n = 10) %>%
  ungroup() -> top10
DoHeatmap(combined_neurons_clean, features = top10$gene) + NoLegend()


combined_neurons_clean <- subset(combined_neurons_clean, idents = 3, invert = TRUE)

DimPlot(combined_neurons_clean, reduction = "umap", group.by = "seurat_clusters")

Idents(combined_neurons_clean) <- combined_neurons_clean$seurat_clusters

VlnPlot(combined_neurons_clean, features = c("Slc17a6", "Slc17a7", "Gad1", "Gad2", "Fam19a1", "Schip1", "Trhde",
                                             "Nfia", "Fbxl7", "Gpc3", "Zeb2", "Cpne9", "Sema5a", "Grik1", "Ntng1","Ebf2", "Nefm", "Ttn", "Sox5", "Lhfp"), group.by = "seurat_clusters", stack = TRUE, flip = TRUE)


# top markers 
top_markers <- markers_clean %>%
  filter(p_val_adj < 0.11 & avg_log2FC > 0.25) %>%
  group_by(cluster) %>%
  top_n(n = 5, wt = avg_log2FC)  

# Extract unique genes for dot plot
top_genes <- unique(top_markers$gene)

DotPlot(combined_neurons_clean, features = top_genes) +
  scale_color_gradientn(colors = c("#a6cee3", "#cab2d6", "#e31a1c")) +  
  scale_size(range = c(1, 6)) +  
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 10),  
        axis.text.y = element_text(size = 10),  
        plot.title = element_text(size = 14, face = "bold"),  
        panel.grid.major = element_blank(),  
        panel.background = element_blank()) +  
  labs(title = "Top 5 Markers per Cluster",
       x = "Genes", y = "Cluster Identities") +  
  coord_flip() +  
  theme_minimal()  


combined_neurons_clean$cell_type <- as.character(Idents(combined_neurons_clean))

combined_neurons_clean$cell_type[combined_neurons_clean$seurat_clusters == 0] <- "GABA1"
combined_neurons_clean$cell_type[combined_neurons_clean$seurat_clusters == 1] <- "Glut1"
combined_neurons_clean$cell_type[combined_neurons_clean$seurat_clusters == 2] <- "GABA2"
combined_neurons_clean$cell_type[combined_neurons_clean$seurat_clusters == 3] <- "Glut2"
combined_neurons_clean$cell_type[combined_neurons_clean$seurat_clusters == 4] <- "Glut3"
combined_neurons_clean$cell_type[combined_neurons_clean$seurat_clusters == 5] <- "GABA3"
combined_neurons_clean$cell_type[combined_neurons_clean$seurat_clusters == 6] <- "Glut3"
combined_neurons_clean$cell_type[combined_neurons_clean$seurat_clusters == 7] <- "GABA4"
combined_neurons_clean$cell_type[combined_neurons_clean$seurat_clusters == 8] <- "Glut4"
combined_neurons_clean$cell_type[combined_neurons_clean$seurat_clusters == 9] <- "GABA5"
combined_neurons_clean$cell_type[combined_neurons_clean$seurat_clusters == 10] <- "GABA6"
combined_neurons_clean$cell_type[combined_neurons_clean$seurat_clusters == 11] <- "Glut5"
combined_neurons_clean$cell_type[combined_neurons_clean$seurat_clusters == 12] <- "Glut6"
combined_neurons_clean$cell_type[combined_neurons_clean$seurat_clusters == 13] <- "Glut7"
combined_neurons_clean$cell_type[combined_neurons_clean$seurat_clusters == 14] <- "Glut8"

Idents(combined_neurons_clean) <- combined_neurons_clean$cell_type

# Load required libraries
library(ggplot2)

# Define a custom color palette for the violin plot
custom_colors <- c("#d73027", "#fc8d59", "#fee090", "#91bfdb", "#4575b4", 
                   "#a6cee3", "#cab2d6", "#e31a1c", "#33a02c", "#1f78b4",
                   "#ff7f00", "#b2df8a", "#6a3d9a", "#ffff99", "#fdbf6f",
                   "#fb9a99", "#a6cee3", "#b15928", "#e31a1c", "#1f78b4", "#bc80bd", "#66a61e", "#1f78b4", "#d53e4f")

# Generate the violin plot with custom colors and improved aesthetics
VlnPlot(combined_neurons_clean, 
        features = c("Slc17a6", "Slc17a7", "Gad1", "Gad2", "Schip1", "Fam19a1",  "Trhde",
                     "Nfia", "Fbxl7", "Gpc3", "Foxp2", "Cpne9","Ebf2", "Stac2", "Zeb2", "Satb2", "Sox5", "Sema5a",
                     "Nefm", "Ttn",  "Lhfp"), 
        group.by = "cell_type", stack = TRUE, flip = TRUE) + 
  scale_fill_manual(values = custom_colors) + NoLegend()



# Generate UMAP plot with colored cluster annotations
dim_plot <- DimPlot(combined_neurons_clean, reduction = 'umap', raster = FALSE, shuffle = TRUE, label = FALSE) + 
  scale_color_manual(values = custom_colors) +  
  theme_bw() + 
  theme(legend.text = element_text(size = 14),  
        axis.title = element_text(size = 16, face = "bold"), 
        axis.text = element_text(size = 12),  
        plot.title = element_text(size = 18, face = "bold", hjust = 0.5),  
        panel.border = element_rect(color = "black", size = 1),  
        panel.grid = element_blank()) + NoLegend() 

dim_plot

##### mapping cell barcodes of neuronal subset to original seurat object
PM_Neurons$cell_type [mapply(grepl, colnames(PM_Neurons), paste(colnames(subset(combined_neurons_clean, subset = cell_type == c("GABA1"))), collapse = "|"))] <- "GABA1"
PM_Neurons$cell_type [mapply(grepl, colnames(PM_Neurons), paste(colnames(subset(combined_neurons_clean, subset = cell_type == c("GABA2"))), collapse = "|"))] <- "GABA2"
PM_Neurons$cell_type [mapply(grepl, colnames(PM_Neurons), paste(colnames(subset(combined_neurons_clean, subset = cell_type == c("Glut1"))), collapse = "|"))] <- "Glut1"
PM_Neurons$cell_type [mapply(grepl, colnames(PM_Neurons), paste(colnames(subset(combined_neurons_clean, subset = cell_type == c("GABA3"))), collapse = "|"))] <- "GABA3"
PM_Neurons$cell_type [mapply(grepl, colnames(PM_Neurons), paste(colnames(subset(combined_neurons_clean, subset = cell_type == c("Glut2"))), collapse = "|"))] <- "Glut2"
PM_Neurons$cell_type [mapply(grepl, colnames(PM_Neurons), paste(colnames(subset(combined_neurons_clean, subset = cell_type == c("Glut3"))), collapse = "|"))] <- "Glut3"
PM_Neurons$cell_type [mapply(grepl, colnames(PM_Neurons), paste(colnames(subset(combined_neurons_clean, subset = cell_type == c("GABA4"))), collapse = "|"))] <- "GABA4"
PM_Neurons$cell_type [mapply(grepl, colnames(PM_Neurons), paste(colnames(subset(combined_neurons_clean, subset = cell_type == c("GABA5"))), collapse = "|"))] <- "GABA5"
PM_Neurons$cell_type [mapply(grepl, colnames(PM_Neurons), paste(colnames(subset(combined_neurons_clean, subset = cell_type == c("Glut4"))), collapse = "|"))] <- "Glut4"
PM_Neurons$cell_type [mapply(grepl, colnames(PM_Neurons), paste(colnames(subset(combined_neurons_clean, subset = cell_type == c("Glut5"))), collapse = "|"))] <- "Glut5"
PM_Neurons$cell_type [mapply(grepl, colnames(PM_Neurons), paste(colnames(subset(combined_neurons_clean, subset = cell_type == c("Glut6"))), collapse = "|"))] <- "Glut6"
PM_Neurons$cell_type [mapply(grepl, colnames(PM_Neurons), paste(colnames(subset(combined_neurons_clean, subset = cell_type == c("GABA6"))), collapse = "|"))] <- "GABA6"
PM_Neurons$cell_type [mapply(grepl, colnames(PM_Neurons), paste(colnames(subset(combined_neurons_clean, subset = cell_type == c("Glut7"))), collapse = "|"))] <- "Glut7"
PM_Neurons$cell_type [mapply(grepl, colnames(PM_Neurons), paste(colnames(subset(combined_neurons_clean, subset = cell_type == c("Glut8"))), collapse = "|"))] <- "Glut8"

saveRDS(combined_neurons_clean, file= "GABA_Gluta.rds")

##############to remove the cells from original object that were removed durong subtyping
clean_barcodes <- colnames(combined_neurons_clean)

# Identify excitatory and inhibitory neurons in PM_Neurons
excitatory_inhibitory_cells <- which(PM_Neurons$cell_type %in% c("Vglut1+ excitatory neurons", "Vglut2+ excitatory neurons", "Inhibitory neurons"))


# Only update the annotations for the matching barcodes
PM_Neurons$cell_type[excitatory_inhibitory_cells] <- combined_neurons_clean$cell_type[match(colnames(PM_Neurons)[excitatory_inhibitory_cells], colnames(combined_neurons_clean))]

#  Assign NA cells to a "Low-Quality" label
PM_Neurons$cell_type[is.na(PM_Neurons$cell_type)] <- "Low-Quality"

DimPlot(PM_Neurons, reduction = "umap", group.by = "cell_type", raster = FALSE)

cell_type_counts <- table(PM_Neurons$cell_type)

print(cell_type_counts)

PM_Neurons_clean <- subset(PM_Neurons, subset = cell_type != "Low-Quality")
DimPlot(PM_Neurons_clean, reduction = "umap", group.by = "cell_type", raster = FALSE)
Idents(PM_Neurons_clean) <- PM_Neurons_clean$cell_type

#saveRDS(PM_Neurons_clean, file= "PM_Neurons_clean.rds")


# Define a custom color palette with more vibrant and distinct colors
custom_colors <- c("GABA1" = "#1b9e77", "GABA2" = "#d95f02", "GABA3" = "#7570b3", 
                   "GABA4" = "#e7298a", "GABA5" = "#66a61e", "GABA6" = "#e6ab02",
                   "Glut1" = "#a6761d", "Glut2" = "#4575b4", "Glut3" = "#1f78b4", 
                   "Glut4" = "#b2df8a", "Glut5" = "#33a02c", "Glut6" = "#fb9a99", 
                   "Glut7" = "#e31a1c",
                   "Glut8" = "#d53e4f", "Cholinergic neurons" = "#ff7f00", 
                   "Erythrocytes" = "#6a3d9a", "Astro3" = "#8dd3c7", 
                   "Peptidergic neurons" = "#fdae61", "Myelinating glia" = "#b3de69", 
                   "Purkinje neurons_2" = "#bc80bd", "Collagen-enriched neurons" = "#ccebc5", 
                   "Cerebellar granule neurons" = "#ffed6f")


# Generate UMAP plot with colored cluster annotations
dim_plot <- DimPlot(PM_Neurons_clean, reduction = 'umap', raster = FALSE, shuffle = TRUE, label = FALSE) + 
  scale_color_manual(values = custom_colors) +  
  theme_bw() + 
  theme(legend.text = element_text(size = 14),  
        axis.title = element_text(size = 16, face = "bold"), 
        axis.text = element_text(size = 12),  
        plot.title = element_text(size = 18, face = "bold", hjust = 0.5),  
        panel.border = element_rect(color = "black", size = 1),  
        panel.grid = element_blank()) 

dim_plot


#################
# Subset the migrating neurons
Collagen_enriched <- subset(PM_Neurons_clean, idents = "Collagen-enriched neurons")

# Identify mitochondrial and ribosomal genes
mt_genes <- grep("^mt-", rownames(Collagen_enriched@assays$RNA@data), value = TRUE)
ribo_genes <- grep("^(Rpl|Rps)", rownames(Collagen_enriched@assays$RNA@data), value = TRUE)
genes_to_remove <- c(mt_genes, ribo_genes)
genes_to_keep <- setdiff(rownames(Collagen_enriched@assays$RNA@data), genes_to_remove)

# Subset counts, data, and meta.features layers
Collagen_enriched@assays$RNA@counts <- Collagen_enriched@assays$RNA@counts[genes_to_keep, ]
Collagen_enriched@assays$RNA@data <- Collagen_enriched@assays$RNA@data[genes_to_keep, ]
if (!is.null(Collagen_enriched@assays$RNA@meta.features)) {
  Collagen_enriched@assays$RNA@meta.features <- Collagen_enriched@assays$RNA@meta.features[genes_to_keep, ]
}

Collagen_enriched <- NormalizeData(Collagen_enriched)
Collagen_enriched <- FindVariableFeatures(Collagen_enriched, selection.method = "vst")
Collagen_enriched <- ScaleData(Collagen_enriched)
Collagen_enriched <- RunPCA(Collagen_enriched)
ElbowPlot(Collagen_enriched)
Collagen_enriched <- RunUMAP(Collagen_enriched, dims = 1:20)
Collagen_enriched <- FindNeighbors(Collagen_enriched, dims = 1:20)
Collagen_enriched <- FindClusters(Collagen_enriched, resolution = 0.1)

DimPlot(Collagen_enriched, reduction = "umap", group.by = "seurat_clusters")


VlnPlot(
  Collagen_enriched, 
  features = c("Dcx", "Tubb3", "Ctnna3", "Snap25", "Arc"), 
  raster = FALSE, 
  pt.size = 0
)

Collagen_enriched_markers <- FindAllMarkers(Collagen_enriched, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)

top_markers <- Collagen_enriched_markers %>%
  filter(p_val_adj < 0.05 & avg_log2FC > 0.25) %>%
  group_by(cluster) %>%
  top_n(n = 5, wt = avg_log2FC)  

top_genes <- unique(top_markers$gene)

dot_plot <- DotPlot(Collagen_enriched, features = top_genes) +
  scale_color_gradientn(colors = c("#2C7BB6", "purple", "orange"))+  
  scale_size(range = c(1, 6)) +  
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 10),  
        axis.text.y = element_text(size = 10),  
        plot.title = element_text(size = 14, face = "bold"), 
        panel.grid.major = element_blank(),  
        panel.background = element_blank()) +  
  labs(title = "Top 5 Markers per Cluster",
       x = "Genes", y = "Cluster Identities") + 
  coord_flip() +  
  theme_minimal()  

# Display the plot
dot_plot

# Extract marker genes for each cluster
marker_genes <- Collagen_enriched_markers %>%
  filter(p_val_adj < 0.05 & avg_log2FC > 0.25) %>%
  group_by(cluster) %>%
  summarise(genes = list(unique(gene)))

################################
library(clusterProfiler)
library(org.Mm.eg.db)  
# Initialize a list to store enrichment results for all clusters
cluster_enrichment <- list()

# Loop through each cluster
for (i in 1:nrow(marker_genes)) {
  cluster_name <- marker_genes$cluster[i]
  cluster_genes <- marker_genes$genes[[i]]
  
  # Perform GO enrichment analysis
  enriched_GO <- enrichGO(gene = cluster_genes,
                          OrgDb = org.Mm.eg.db,
                          keyType = "SYMBOL",  
                          ont = "BP",  
                          pvalueCutoff = 0.05)
  
  simplified_GO <- simplify(enriched_GO,
                            cutoff = 0.7,  
                            by = "p.adjust",
                            select_fun = min)
  
  # Convert to a data frame and add cluster name
  enriched_GO_df <- as.data.frame(simplified_GO)
  enriched_GO_df$Cluster <- cluster_name  
  
  # Store results in the list
  cluster_enrichment[[i]] <- enriched_GO_df
}

combined_enrichment <- do.call(rbind, cluster_enrichment)



# Select top 5 GO terms per cluster based on adjusted p-values
top_GO_terms <- combined_enrichment %>%
  group_by(Cluster) %>%
  top_n(-10, wt = p.adjust) %>%  
  mutate(log_pvalue = -log10(p.adjust))  

plot_data <- top_GO_terms %>%
  arrange(Cluster, desc(log_pvalue)) %>%  
  mutate(Description = factor(Description, levels = unique(Description)))  



ggplot(plot_data, aes(x = Cluster, y = Description)) +
  geom_tile(aes(fill = log_pvalue), color = "white") +  
  scale_fill_viridis(option = "inferno") +  
  labs(title = "GO Enrichment by Cluster",
       x = "Cluster",
       y = "GO Terms",
       fill = "-log10(p-value)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  
Collagen_enriched$cell_type <- as.character(Idents(Collagen_enriched))

Collagen_enriched$cell_type[Collagen_enriched$seurat_clusters == 0] <- "Neu_1"
Collagen_enriched$cell_type[Collagen_enriched$seurat_clusters == 1] <- "Neu_2"
Collagen_enriched$cell_type[Collagen_enriched$seurat_clusters == 2] <- "Neu_3"
Collagen_enriched$cell_type[Collagen_enriched$seurat_clusters == 3] <- "Neu_4"
Collagen_enriched$cell_type[Collagen_enriched$seurat_clusters == 4] <- "Neu_5"
Collagen_enriched$cell_type[Collagen_enriched$seurat_clusters == 5] <- "Neu_6"

Idents(Collagen_enriched) <- Collagen_enriched$cell_type

cell_type_colors <- c(
  "Neu_1" = "#1f77b4",
  "Neu_2" = "#ff7f0e",
  "Neu_3" = "#2ca02c",
  "Neu_4" = "#d62728",
  "Neu_5" = "#9467bd",
  "Neu_6" = "#8c564b"
)

# Create DimPlot with the custom colors
DimPlot(
  Collagen_enriched,
  reduction = "umap",
  group.by = "cell_type",
  label = FALSE,
  cols = cell_type_colors
) + ggtitle("UMAP Plot with Unique Cell Type Colors")


##### mapping cell barcodes of neuronal subset to original seurat object
PM_Neurons_clean$cell_type [mapply(grepl, colnames(PM_Neurons_clean), paste(colnames(subset(Collagen_enriched, subset = cell_type == c("Neu_1"))), collapse = "|"))] <- "Neu_1"
PM_Neurons_clean$cell_type [mapply(grepl, colnames(PM_Neurons_clean), paste(colnames(subset(Collagen_enriched, subset = cell_type == c("Neu_2"))), collapse = "|"))] <- "Neu_2"
PM_Neurons_clean$cell_type [mapply(grepl, colnames(PM_Neurons_clean), paste(colnames(subset(Collagen_enriched, subset = cell_type == c("Neu_3"))), collapse = "|"))] <- "Neu_3"
PM_Neurons_clean$cell_type [mapply(grepl, colnames(PM_Neurons_clean), paste(colnames(subset(Collagen_enriched, subset = cell_type == c("Neu_4"))), collapse = "|"))] <- "Neu_4"
PM_Neurons_clean$cell_type [mapply(grepl, colnames(PM_Neurons_clean), paste(colnames(subset(Collagen_enriched, subset = cell_type == c("Neu_5"))), collapse = "|"))] <- "Neu_5"
PM_Neurons_clean$cell_type [mapply(grepl, colnames(PM_Neurons_clean), paste(colnames(subset(Collagen_enriched, subset = cell_type == c("Neu_6"))), collapse = "|"))] <- "Neu_6"

# Define a custom color palette with added colors for Neu_1 to Neu_6
custom_colors <- c(
  "GABA1" = "#1b9e77", "GABA2" = "#d95f02", "GABA3" = "#7570b3", 
  "GABA4" = "#e7298a", "GABA5" = "#66a61e", "GABA6" = "#e6ab02",
  "Glut1" = "#a6761d", "Glut2" = "#ccebc5", "Glut3" = "#1f78b4", 
  "Glut4" = "#b2df8a", "Glut5" = "#33a02c", "Glut6" = "#fb9a99", 
  "Glut7" = "#e31a1c",
  "Glut8" = "#d53e4f", "Cholinergic neurons" = "#ff7f00", 
  "Erythrocytes" = "#6a3d9a", "Astro3" = "#8dd3c7", 
  "Peptidergic neurons" = "#fdae61", "Myelinating glia" = "#b3de69", 
  "Purkinje neurons_2" = "#bc80bd",
  "Cerebellar granule neurons" = "#ffed6f",
  "Neu_1" = "#8c564b", "Neu_2" = "#9467bd", "Neu_3" = "#17becf", 
  "Neu_4" = "#d62728", "Neu_5" = "#2ca02c", "Neu_6" = "#ff7f0e"
)

# Generate UMAP plot with vibrant and distinct colors
DimPlot(PM_Neurons_clean, reduction = "umap", group.by = "cell_type", raster = FALSE, pt.size = 0.2, label = FALSE) + 
  scale_color_manual(values = custom_colors) #+ NoLegend()

Idents(PM_Neurons_clean) <- "cell_type"

cells_to_keep <- subset(
  PM_Neurons_clean,
  idents = setdiff(levels(PM_Neurons_clean), 
                   c("Erythrocytes", "Myelinating glia", "Astro3"))
)

p <- DimPlot(
  cells_to_keep, 
  reduction = "umap", 
  group.by = "cell_type", 
  raster = FALSE, 
  pt.size = 0.3, 
  label = FALSE
) + scale_color_manual(values = custom_colors)

ggsave(
  filename = "UMAP_neurons_300dpi.png", 
  plot = p, 
  width = 10.70, height = 5.29, units = "in", 
  dpi = 300
)

saveRDS(cells_to_keep, file= "PM_Neurons_Level3.rds")
